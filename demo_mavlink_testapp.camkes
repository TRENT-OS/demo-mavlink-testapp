import <std_connector.camkes>;
import <global-connectors.camkes>;

//-----------------------------------------
// Include VM
/*
 * can't import VM.camkes, because it adds dependencies on components instead of
 * just the interfaces
 *
 */
import <vm-connectors.camkes>;
import <seL4VMDTBPassthrough.idl4>;
import <Batch.idl4>;
import <PutChar.idl4>;
import <GetChar.idl4>;
import <VirtQueues.idl4>;
import <FileServerInterface.camkes>;

struct vswitch_mapping {
       string mac_addr;
       int send_id;
       int recv_id;
};

#include <configurations/vm.h>
component VM {
    VM_INIT_DEF()
    attribute vswitch_mapping vswitch_layout[] = [];
    attribute string vswitch_mac_address = "";
}


// Components
import <VirtQueue/VirtQueue.camkes>;
import <FileServer/FileServer.camkes>;


// Platform specific configurations
#include <plat.camkes>

//------------------------------------------

#include "system_config.h"
// Use Chanmux instead of nic for QEMU arm virt
//#include "plat_nic.camkes"
#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    nwDriver, data,
    nwDriver, ctrl
)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
NIC_ChanMux_COMPONENT_DEFINE(NwDriver, NIC_DRIVER_RINGBUFFER_SIZE)


#include "RamDisk/RamDisk.camkes"
RamDisk_COMPONENT_DEFINE(RamDisk)
#include "StorageServer/camkes/StorageServer.camkes"
StorageServer_COMPONENT_DEFINE(StorageServer)

#include "NetworkStack_PicoTcp/camkes/NetworkStack_PicoTcp.camkes"
NetworkStack_PicoTcp_COMPONENT_DEFINE(
    NetworkStack_PicoTcp,
    NIC_DRIVER_RINGBUFFER_SIZE,
    NetworkStack_PicoTcp_NO_ADDITIONAL_INTERFACES
)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "FCAdapter/camkes/FCAdapter.camkes"
FCAdapter_COMPONENT_DEFINE(FCAdapter)

#include "components/TestApp/TestApp.camkes"


component PingClient {
    control;
    /* Virtqueue connection for send and recv */
    uses VirtQueueDev recv;
    uses VirtQueueDrv send;
    emits Callback self;
    consumes Callback ping_wait;
    emits PingReady pingready;
    consumes PingRequested pingreq;
}

assembly {
    composition {
        //----------------------------------------------------------------------
        // ChanMux + UART
        //----------------------------------------------------------------------
        component ChanMux_UART chanMux_UART;
        component UART_CHANMUX uart;
        ChanMux_UART_INSTANCE_CONNECT(chanMux_UART, uart)
        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        component NwDriver nwDriver;

        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            nwDriver, data, ctrl
        )


        // Network driver
        //EXERCISE_DEMO_NIC_INSTANCE(nwDriver)

        // Network stack
        component NetworkStack_PicoTcp nwStack;
        NetworkStack_PicoTcp_INSTANCE_CONNECT(
            nwStack,
            nwDriver
        )
        NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS(
            nwStack,
            testApp, networkStack,
            fcAdapter, networkStack
        )

        // Time server
        component TimeServer timeServer;
        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            nwStack.timeServer_rpc, nwStack.timeServer_notify
        )
        
        // Flight Controller Adapter
        component FCAdapter fcAdapter;
        FCAdapter_INSTANCE_CONNECT_CLIENTS(
            fcAdapter,
            testApp, fcAdapter
        )

        // Demo Component
        component TestApp testApp;
        //-----------------------------------------------------
        // VM components
        //-----------------------------------------------------
        component FileServer fileServer;

        component VM vm0;
        connection seL4VMDTBPassthrough vm0_dtb(
            from vm0.dtb_self,
            to   vm0.dtb
        );
        connection seL4GlobalAsynch vm0_notify_ready(
            from vm0.notification_ready_connector,
            to   vm0.notification_ready
        );
        connection seL4RPCDataport vm0_fs(
            from vm0.fs,
            to   fileServer.fs_ctrl
        );

        component PingClient ping_client;
        component VirtQueueInit ping_vqinit0;
        component VirtQueueInit ping_vqinit1;

        connection seL4VirtQueues ping_virtq_conn0(
	    to ping_vqinit0.init,
	    from ping_client.send,
	    from vm0.recv
	);
        connection seL4VirtQueues ping_virtq_conn1(
	    to ping_vqinit1.init,
	    from ping_client.recv,
	    from vm0.send
	);
        connection seL4GlobalAsynchCallback ping_global_callback(
	    from ping_client.self,
	    to ping_client.ping_wait
	);

	connection seL4NotificationNative PingReady (
	from ping_client.pingready, to testApp.pingready
	);

	connection seL4NotificationNative PingRequested (
	from testApp.pingreq, to ping_client.pingreq
	);
    }
    configuration {
        // Storage
        ramDisk.storage_size = 2 * 1024 * 1024;

        // Network driver
        //EXERCISE_DEMO_NIC_CONFIG(nwDriver)
        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            nwDriver.chanMux_Rpc,
            chanMuxStorage.chanMux_Rpc
        )

        // Network stack
        NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES(
            testApp, networkStack,
            fcAdapter, networkStack
        )
        NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS(
            nwStack,
            2,
            2
        )

        // Time server
        TimeServer_CLIENT_ASSIGN_BADGES(
            nwStack.timeServer_rpc
        )

        // Flight Controller Adapter
        FCAdapter_INSTANCE_CONFIGURE(
            fcAdapter,
            ETH_ADDR,
            MAVLINK_LISTEN_PORT
        )

        //-------------------------------------------
        // VM configuration
        //-------------------------------------------
        fileServer.heap_size = 0x200000; // 128 KiB seems enough

        // see also plat.camkes for more config values
        vm0.num_vcpus               = 1;
        vm0.base_prio               = 100;
        vm0._priority               = 101;

        vm0.num_extra_frame_caps    = 0;
        vm0.extra_frame_map_address = 0;
        vm0.cnode_size_bits         = 23;
        vm0.simple_untyped24_pool   = 12;
        vm0.asid_pool               = true;
        vm0.global_endpoint_base    = 1 << 27;
        vm0.simple                  = true;
        vm0.sem_value               = 0;
        vm0.heap_size               = 0x300000;
        vm0.fs_shmem_size           = 0x100000;

        vm0.recv_id = 0;
        vm0.recv_shmem_size = 32768;
        vm0.send_id = 1;
        vm0.send_shmem_size = 32768;
        vm0.vswitch_mac_address = "02:00:00:00:AA:01";
        vm0.vswitch_layout = [{"mac_addr": "02:00:00:00:AA:02", "recv_id": 0, "send_id":1}];

        ping_client.recv_id = 0;
        ping_client.recv_shmem_size = 32768;
        ping_client.send_id = 1;
        ping_client.send_shmem_size = 32768;
        ping_client.vswitch_mac_address = "02:00:00:00:AA:02";
    }
}
